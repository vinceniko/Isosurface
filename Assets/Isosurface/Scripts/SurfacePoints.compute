#pragma kernel SurfacePointsKernel
#pragma multi_compile_local SURFACE_POINT_QEF SURFACE_POINT_CENTROID SURFACE_POINT_BLOCKY

#include "Common.hlsl"
#include "qef.hlsl"

void SetNormal(uint3 id, float3 normal) 
{
	// id = mul(_ShapeToWorld, float4(id.zyx, 1.0)).xyz;
	if (id.x < _Resolution && id.y < _Resolution && id.z < _Resolution) 
    {
		_Normals[threeDToOneD(id)] = float4(normal, 1.0);
	}
}

float3 SetSurfacePoint(uint3 id, float3 val) 
{
	// id = mul(_ShapeToWorld, float4(id.zyx, 1.0)).xyz;
	if (id.x < _Resolution-1 && id.y < _Resolution-1 && id.z < _Resolution-1 &&
    val.x < _Resolution && val.y < _Resolution && val.z < _Resolution &&
    val.x >= 0 && val.y >= 0 && val.z >= 0) 
    {
        val = transformToCenter(val);
		_SurfacePoints[threeDToOneD(id)] = float4(val, 1.0);
	} else {
        val = transformToCenter(id);
        _SurfacePoints[threeDToOneD(id)] = float4(val, 0.0);
    }

    return val;
}

float3 GetSurfacePointQEF(Edge edges_on_surface[12], int num_edges_intersected, float3 pos, float3 strides[3]) {
    float4 pointaccum = float4(0, 0, 0, 0);
    mat3x3_tri ATA = { 0, 0, 0, 0, 0, 0 };
    float4 Atb = float4(0, 0, 0, 0);
    float btb = 0;

    float3 edge_intersections[12];
    for (int i = 0; i < num_edges_intersected; i++) {
        float3 edge_crossing = linInterpolate(edges_on_surface[i].end, edges_on_surface[i].start, _IsoVals[threeDToOneD(edges_on_surface[i].end)], _IsoVals[threeDToOneD(edges_on_surface[i].start)]);
        // // simple avg
        // float3 edge_crossing = (edges_on_surface[i].end - edges_on_surface[i].start) / 2.0 + edges_on_surface[i].start;
        // float3 edge_crossing = (edges_on_surface[i].end - edges_on_surface[i].start) / 2.0 + edges_on_surface[i].start;
        edge_intersections[i] = edge_crossing;
        float3 normal = EstimateNormal(edge_crossing);
        qef_add(float4(normal, 0.0), float4(edge_crossing, 0.0), ATA, Atb, pointaccum, btb);
    }
    // qef_add(PyramidEstimateNormal(pos + (x_stride+y_stride+z_stride) / 2), pos + (x_stride+y_stride+z_stride) / 2, ATA, Atb, pointaccum);

    float4 surface_point_ = float4(0.0, 0.0, 0.0, 1.0);
    float3 com = float3(pointaccum.x, pointaccum.y, pointaccum.z) / pointaccum.w;
    float error = qef_solve(ATA, Atb, pointaccum, surface_point_);
    float3 surface_point = surface_point_.xyz;
    float3 Min = pos;
    float3 Max = pos + (strides[0]+strides[1]+strides[2]);
    if (surface_point.x < Min.x || surface_point.x > Max.x ||
        surface_point.y < Min.y || surface_point.y > Max.y ||
        surface_point.z < Min.z || surface_point.z > Max.z)
    {
        surface_point = com;
    }

    return surface_point;
}

float3 GetSurfacePointCentroid(Edge edges_on_surface[12], int num_edges_intersected) {
    float3 edge_intersections[12];
    for (int i = 0; i < num_edges_intersected; i++) {
        float3 edge_crossing = linInterpolate(edges_on_surface[i].end, edges_on_surface[i].start, _IsoVals[threeDToOneD(edges_on_surface[i].end)], _IsoVals[threeDToOneD(edges_on_surface[i].start)]);
        // // simple avg
        // float3 edge_crossing = (edges_on_surface[i].end - edges_on_surface[i].start) / 2.0 + edges_on_surface[i].start;
        // float3 edge_crossing = (edges_on_surface[i].end - edges_on_surface[i].start) / 2.0 + edges_on_surface[i].start;
        edge_intersections[i] = edge_crossing;
    }

    int count = 0;
    float3 surface_point = float3(0.0, 0.0, 0.0);
    for (int i = 0; i < num_edges_intersected; i++) {
        surface_point += edge_intersections[i];
        count++;
    }
    surface_point /= float3(count, count, count);

    return surface_point;
}

float3 GetSurfacePointBlocky(float3 pos, float3 strides[3]) {
    // // mincraft world
    float3 surface_point = pos + (strides[0]+strides[1]+strides[2]) / 2;

    return surface_point;
}

float3 SurfacePoints(uint3 id: SV_DispatchThreadID) {
    float3 pos = id; // cube rooted at pos
    
    Edge cube_edges[12];

    // strides
    const int3 x_stride = int3(1, 0, 0);
    const int3 y_stride = int3(0, 1, 0);
    const int3 z_stride = int3(0, 0, 1);
    int3 dim_offsets[3] = {x_stride, y_stride, z_stride};
    
    // operate on each axis
    for (int i = 0; i < 3; i++) {
        int3 main_dim_offset = dim_offsets[i];

        int other_dims[2];
        for (int dim_i = 0, arr_idx = 0; dim_i < 3; dim_i++) {
            if (dim_i != i) {
                other_dims[arr_idx] = dim_i;
                arr_idx++;
            }
        }

        // edge starts
        Edge dim_edges[4];
        // vertical, horizontal
        for (int j = 0; j < 2; j++) {
            dim_edges[j].start = pos + dim_offsets[other_dims[j]];
        }
        // root
        dim_edges[2].start = pos;
        // diagonal
        float3 diag_offset = float3(0.0, 0.0, 0.0);
        for (int j = 0; j < 2; j++) {
            diag_offset += dim_offsets[other_dims[j]];
        }
        dim_edges[3].start = pos + diag_offset;
        
        // edge ends
        for (int j = 0; j < 4; j++) {
            dim_edges[j].end = dim_edges[j].start + main_dim_offset;
        }

        // add to cube_edges
        for (int j = 0; j < 4; j++) {
            cube_edges[i * 4 + j] = dim_edges[j];
        }
    }

    Edge edges_on_surface[12];
    int num_edges_intersected = 0;
    for (int i = 0; i < 12; i++) {
        Edge cube_edge = cube_edges[i];
        if (_IsoVals[threeDToOneD(cube_edge.start)] * _IsoVals[threeDToOneD(cube_edge.end)] < 0) {
            edges_on_surface[num_edges_intersected] = cube_edge;
            num_edges_intersected++;
        }
    }

    if (num_edges_intersected > 0) {
        float3 surface_point = float3(0,0,0);
        float3 strides[3] = {x_stride, y_stride, z_stride};
        #if defined(SURFACE_POINT_QEF)
            surface_point = GetSurfacePointQEF(edges_on_surface, num_edges_intersected, pos, strides);
        #elif defined(SURFACE_POINT_CENTROID)
            surface_point = GetSurfacePointCentroid(edges_on_surface, num_edges_intersected);
        #elif defined(SURFACE_POINT_BLOCKY)
            surface_point = GetSurfacePointBlocky(pos, strides);
        #endif
    
        return SetSurfacePoint(id, surface_point.zyx);
    } else {
        pos = transformToCenter(pos).zyx;
        _SurfacePoints[threeDToOneD(id)] = float4(pos, 0.0);

        return pos;
    }
    
    // SetSurfacePoint(id, pos);
}

[numthreads(4, 4, 4)]
void SurfacePointsKernel(uint3 id: SV_DispatchThreadID) {
    float3 pos = SurfacePoints(id);
    _Normals[threeDToOneD(id)] = float4(EstimateNormal(pos), 1);
}