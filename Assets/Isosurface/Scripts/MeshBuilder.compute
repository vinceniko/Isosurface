#pragma kernel MeshBuilderKernel

#include "Common.hlsl"

struct Triangle {
    float4 verts0;
    float4 normals0;
    float4 verts1;
    float4 normals1;
    float4 verts2;
    float4 normals2;
};

AppendStructuredBuffer<Triangle> _Mesh;

[numthreads(4, 4, 4)]
void MeshBuilderKernel(uint3 id: SV_DispatchThreadID) {
    float3 pos = id; // cube rooted at pos
    
    if (id.x >= _Resolution-1 && id.y >= _Resolution-1 && id.z >= _Resolution-1) return;

    // strides
    int3 x_stride = int3(1, 0, 0);
    int3 y_stride = int3(0, 1, 0);
    int3 z_stride = int3(0, 0, 1);
    int3 dim_offsets[3] = {x_stride, y_stride, z_stride};
    
    // operate on each axis
    for (int i = 0; i < 3; i++) {
        int3 main_dim_offset = dim_offsets[i];

        int other_dims[2];
        for (int dim_i = 0, arr_idx = 0; dim_i < 3; dim_i++) {
            if (dim_i != i) {
                other_dims[arr_idx] = dim_i;
                arr_idx++;
            }
        }

        // edge crossed in middle of quad
        Edge axis_edge;
        axis_edge.start = pos;
        for (int j = 0; j < 2; j++) {
            axis_edge.start += dim_offsets[other_dims[j]];
        }
        axis_edge.end = (pos + (x_stride + y_stride + z_stride)); // all of the axes edges share the same endpoint
        
        // edge doesnt cross surface
        if (_IsoVals[threeDToOneD(axis_edge.start)] * _IsoVals[threeDToOneD(axis_edge.end)] > 0) continue;

        // get quad along axis
        float4 quad_points[4];
        float4 normals[4];
        // root
        quad_points[0] = _SurfacePoints[threeDToOneD(pos)];
        normals[0] = _Normals[threeDToOneD(pos)];
        // horizontal, vertical
        for (int j = 0; j < 2; j++) {
            quad_points[j+1] = _SurfacePoints[threeDToOneD(pos + dim_offsets[other_dims[j]])];
            normals[j+1] = _Normals[threeDToOneD(pos + dim_offsets[other_dims[j]])];
        }
        // diagonal
        float3 diag_offset = float3(0,0,0);
        for (int j = 0; j < 2; j++) {
            diag_offset += dim_offsets[other_dims[j]];
        }
        quad_points[3] = _SurfacePoints[threeDToOneD(pos + diag_offset)];
        normals[3] = _Normals[threeDToOneD(pos + diag_offset)];

        // TODO: iterate through all quad_points and find one that is valid, and set invalid ones to the valid one
        float4 valid_point;
        int valid = 0;
        for (int j = 0; j < 4; j++) {
            if (quad_points[j].w > 0) {
                valid_point = quad_points[j];
                valid++;
            }
        }
        // if (valid == 0) continue;
        int not_valid = 0;
        for (int j = 0; j < 4; j++) {
            if (quad_points[j].w < 1) {
                // quad_points[j] = valid_point;
                quad_points[j].w = 1;
                not_valid++;
            }
        }
        if (not_valid > 0) continue;

        // split along shorter diagonal, 0,3 or 1,2
        // clockwise winding order of triangles
        // outside of surface is positive
        // verts look like when facing:
        // 2 3
        // 0 1

        int3 tri_indices[2];
        bool facing_inside = _IsoVals[threeDToOneD(axis_edge.end)] > _IsoVals[threeDToOneD(axis_edge.start)];
        // y axis direction is flipped orientation
        if (i == 1) {
            facing_inside = !facing_inside;
        }
        if (facing_inside) {
            if (length(quad_points[3] - quad_points[0]) < length(quad_points[2] - quad_points[1])) { // split along shorter diag
                tri_indices[0] = int3(0,2,3);
                tri_indices[1] = int3(0,3,1);
            } else {
                tri_indices[0] = int3(0,2,1);
                tri_indices[1] = int3(2,3,1);
            }
        } else { // reverse the above triangles' vert order, too lazy to put into loop rn
            if (length(quad_points[3] - quad_points[0]) < length(quad_points[2] - quad_points[1])) { // split along shorter diag
                tri_indices[0] = int3(3,2,0);
                tri_indices[1] = int3(1,3,0);
            } else {
                tri_indices[0] = int3(1,2,0);
                tri_indices[1] = int3(1,3,2);
            }
        }

        Triangle tris[2];
        for (int j = 0; j < 2; j++) {
            for (int k = 0; k < 3; k++) {
                tris[j].verts0 = quad_points[tri_indices[j][0]];
                tris[j].verts1 = quad_points[tri_indices[j][1]];
                tris[j].verts2 = quad_points[tri_indices[j][2]];

                tris[j].normals0 = normals[tri_indices[j][0]];
                tris[j].normals1 = normals[tri_indices[j][1]];
                tris[j].normals2 = normals[tri_indices[j][2]];
            }
        }

        _Mesh.Append(tris[0]);
        _Mesh.Append(tris[1]);
    }
}